# 1- cria projeto
django-admin startproject myproject

# 2- testar
# manage.py - utilitário de linha de comando do DJANGO
python manage.py runserver

# 3- configurar Banco
# settings.py
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dice-----------------',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# 4- cria tabelas
# o banco precisa existir
python manage.py migrate

# 5- cria super usuario
python manage.py createsuperuser

# 6- criar primeira view
# criar arquivo views.py
# from django.http import HttpResponse
# criar function based view
#     def home(request):
# #     request = 'ola, mundo'
# #     response = HttpResponse(request)
#     return response
# importar home em urls.py
# from .views import home
# declarar nova url em urlpatterns
# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('', home),
# ]


# 7- criar outras urls como
# alunos para gerenciar alunos e declarar em urlpatterns

# 8- start app (models(aluno))
python manage startapp myapp
python manage startapp funcionario
python manage startapp aluno
python manage startapp horario
python manage startapp turma
python manage startapp historico
python manage startapp historicoTurma



# 9- mover views "testes" para views do novo app

# 10- atualizar urlpatterns
# from django.urls import path, include
# manter path vazio pois ele importa tudo que está em aluno.urls
#  path('', include('aluno.urls')),
# views dentro do projeto não é o certo
# o correto é dentro de urls.py ter as urls apontando para os apps



# 12- criando models
# criar classe Aluno herdando models.Model
# class Aluno(models.Model):

# 13- registrar novo app em settings
# dizer ao Django que vai usar esses modelos.
# Faça isso editando seu arquivo de configurações e
# alterando a INSTALLED_APPS
# INSTALLED_APPS = [
#     #     ***
#     'aluno',
# ]


# 14- makemigrationsls
'''
O comando makemigrations analisa se foram feitas mudanças
nos modelos e, em caso positivo, cria novas migrações ( Migrations )
para alterar a estrutura do seu banco de dados,
refletindo as alterações feitas
'''
python manage makemigrationsls

# para atualizar as alterações roda o :
python manage migrate


# 15- para testar em linha de comando
python manage shell
# from aluno.models import Aluno
# from aluno.models import Aluno
# a = Aluno.objects.all()

# criar os apps / tabelas
# https://docs.djangoproject.com/en/4.1/topics/db/

# 16- colocar app no admin do Django
# app/admin, importar app
# from .models import Aluno


# 17- registrar app
# admin.site.register(Aluno)

# 18- configurar templates
# settings.py TEMPLATES
# var DIRS:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# na raiz do pro projeto
# criar pasta com nome da var setada

"""
tudo em djando funciona em 'apps'
os apps são os diferentes módulos do sistema
ex: cliente, produto
"""


# ao criar o app é necessário importar em projeto/urls

python manage makemigrationsls
python manage migrate


